'use strict';

var _enzyme = require('enzyme');

var _enzyme2 = _interopRequireDefault(_enzyme);

var _enzymeAdapterReact = require('enzyme-adapter-react-16');

var _enzymeAdapterReact2 = _interopRequireDefault(_enzymeAdapterReact);

require('jsdom-global/register');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _reactScrollUpButton = require('../react-scroll-up-button');

var _reactScrollUpButton2 = _interopRequireDefault(_reactScrollUpButton);

var _chai = require('chai');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_enzyme2.default.configure({ adapter: new _enzymeAdapterReact2.default() });

require('raf').polyfill();


//Testing group
describe('Testing <ScrollUpButton/> Action scroll to assigned props top:', function () {
  var Component = void 0,
      ScrollTo_Stub = void 0;
  before(function () {
    window.pageYOffset = 0;
    //Render component
    Component = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton2.default, { StopPosition: 50 }));

    ScrollTo_Stub = _sinon2.default.stub(window, 'scrollTo').callsFake(function (x, y) {
      window.pageXOffset = x;
      window.pageYOffset = y;
      Component.instance().HandleScroll(); // <-- call HandleScroll so the test can simulate the button being toggled
    });
  });
  after(function () {
    ScrollTo_Stub.restore(); // <-- Restore the objects method
  });
  //did it scroll the page up
  it('did scroll the page to 50', function (done) {
    (0, _chai.expect)(Component.state().ToggleScrollUp).to.equal(''); // <-- Is the button hidden
    window.pageYOffset = 300; // <-- scroll window down to prepare for smulation
    Component.instance().HandleScroll(); // <-- call handleScroll since we scrolled the window down.
    (0, _chai.expect)(Component.state().ToggleScrollUp).to.equal('ScrollUpButton__Toggled'); // <-- Is the button visible
    Component.instance().HandleClick(); // <-- call HandleClick to start the scroll up simulation.
    //Well wait a little bit to let the simulation complete
    setTimeout(function () {
      (0, _chai.expect)(ScrollTo_Stub.lastCall.args[1]).to.within(40, 60); // <-- is pageYOffset between 40 and 60
      (0, _chai.expect)(Component.state().ToggleScrollUp).to.equal(''); // <-- Button should be hidden again
      done(); // <-- since were asynchronous with setTimeout instruct chai that were done with the test.
    }, 500);
  });
});

//Testing group
describe('Testing <ScrollUpButton/> setup:', function () {
  //WAS componentDidMount called
  it('did call componentDidMount', function () {
    var DidMount = _sinon2.default.spy(_reactScrollUpButton2.default.prototype, 'componentDidMount');
    var WillUnmount = _sinon2.default.spy(_reactScrollUpButton2.default.prototype, 'componentWillUnmount');
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton2.default, null));
    (0, _chai.expect)(DidMount.callCount).to.equal(1);
    wrapper.unmount();
    (0, _chai.expect)(WillUnmount.callCount).to.equal(1);
  });

  //Check the ShowAtPostion default
  it('prop defaults', function () {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton2.default, null));
    (0, _chai.expect)(wrapper.props().ShowAtPostion).to.equal(150);
    (0, _chai.expect)(wrapper.props().StopPosition).to.equal(0);
    (0, _chai.expect)(wrapper.props().ContainerClassName).to.equal('ScrollUpButton__Container');
    (0, _chai.expect)(wrapper.props().EasingType).to.equal('easeOutCubic');
    (0, _chai.expect)(wrapper.props().AnimationDuration).to.equal(500);
    (0, _chai.expect)(wrapper.props().TransitionClassName).to.equal('ScrollUpButton__Toggled');
    (0, _chai.expect)(wrapper.props().style).to.deep.equal({});
    (0, _chai.expect)(wrapper.props().ToggledStyle).to.deep.equal({});
  });

  //Check the ShowAtPostion assigned
  it('props assigned', function () {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton2.default, { ShowAtPostion: 200, StopPosition: 100, ContainerClassName: 'NewClass', TransitionClassName: 'AnotherClass', EasingType: 'easeInOutBounce', AnimationDuration: 1000 }));
    (0, _chai.expect)(wrapper.props().ShowAtPostion).to.equal(200);
    (0, _chai.expect)(wrapper.props().StopPosition).to.equal(100);
    (0, _chai.expect)(wrapper.props().ContainerClassName).to.equal('NewClass');
    (0, _chai.expect)(wrapper.props().EasingType).to.equal('easeInOutBounce');
    (0, _chai.expect)(wrapper.props().AnimationDuration).to.equal(1000);
    (0, _chai.expect)(wrapper.props().TransitionClassName).to.equal('AnotherClass');
  });
});

//Testing group
describe('Testing <ScrollUpButton/> current state:', function () {
  // before each it test.
  //make sure window is scrolled to the top
  beforeEach(function () {
    window.pageYOffset = 0;
  });

  //Check the ToggleScrollUp state
  it('ToggleScrollUp should be any empty string', function () {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton2.default, null));
    (0, _chai.expect)(wrapper.state().ToggleScrollUp).to.equal('');
  });

  //Check the ToggleScrollUp state when scrolled down
  it('ToggleScrollUp should be ScrollUpButton__Toggled when scrolled down', function () {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton2.default, null));
    // Set the scroll position to 200 and trigger the event manually
    window.pageYOffset = 200;
    wrapper.instance().HandleScroll();
    (0, _chai.expect)(wrapper.state().ToggleScrollUp).to.equal('ScrollUpButton__Toggled');
  });

  //Check the ToggleScrollUp state when scrolled down when children is passed
  it('ToggleScrollUp should be NewClass when scrolled down, with children', function () {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _reactScrollUpButton2.default,
      null,
      _react2.default.createElement('span', null)
    ));
    // Set the scroll position to 200 and trigger the event manually
    window.pageYOffset = 200;
    wrapper.instance().HandleScroll();
    (0, _chai.expect)(wrapper.state().ToggleScrollUp).to.equal('ScrollUpButton__Toggled');
  });
});

//Testing group
describe('Testing <ScrollUpButton/> Action scroll to default top:', function () {
  var Component = void 0,
      ScrollTo_Stub = void 0;
  before(function () {
    window.pageYOffset = 0;
    //Render component
    Component = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton2.default, null));
    //Setup stub and replace scrollTo function with ours.
    // TypeError: Attempted to wrap scrollTo which is already stubbed
    ScrollTo_Stub = _sinon2.default.stub(window, 'scrollTo').callsFake(function (x, y) {
      window.pageXOffset = x;
      window.pageYOffset = y;
      Component.instance().HandleScroll(); // <-- call HandleScroll so the test can simulate the button being toggled
    });
  });
  after(function () {
    ScrollTo_Stub.restore(); // <-- Restore the objects method
  });
  //did it scroll the page up
  it('did scroll the page to 0', function (done) {
    (0, _chai.expect)(Component.state().ToggleScrollUp).to.equal(''); // <-- Is the button hidden
    window.pageYOffset = 300; // <-- scroll window down to prepare for smulation
    Component.instance().HandleScroll(); // <-- call handleScroll since we scrolled the window down.
    (0, _chai.expect)(Component.state().ToggleScrollUp).to.equal('ScrollUpButton__Toggled'); // <-- Is the button visible
    Component.instance().HandleClick(); // <-- call HandleClick to start the scroll up simulation.
    //Well wait a little bit to let the simulation complete
    setTimeout(function () {
      (0, _chai.expect)(ScrollTo_Stub.lastCall.args[1]).to.within(-10, 10); // <-- is pageYOffset between -10 and 10
      (0, _chai.expect)(Component.state().ToggleScrollUp).to.equal(''); // <-- Button should be hidden again
      done(); // <-- since were asynchronous with setTimeout instruct chai that were done with the test.
    }, 500);
  });
});

//Testing group
describe('Testing Themed Buttons:', function (done) {
  var Component = void 0,
      ScrollTo_Stub = void 0;
  //did it scroll the page up
  it('did load TinyButton', function (done) {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton.TinyButton, null));
    (0, _chai.expect)(wrapper.find('svg').html()).to.equal('<svg viewBox="0 0 28 28" version="1.1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" xml:space="preserve"><path d="M26.297 20.797l-2.594 2.578c-0.391 0.391-1.016 0.391-1.406 0l-8.297-8.297-8.297 8.297c-0.391 0.391-1.016 0.391-1.406 0l-2.594-2.578c-0.391-0.391-0.391-1.031 0-1.422l11.594-11.578c0.391-0.391 1.016-0.391 1.406 0l11.594 11.578c0.391 0.391 0.391 1.031 0 1.422z"></path></svg>');
    done();
  });

  it('did load CircleArrow', function (done) {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton.CircleArrow, null));
    (0, _chai.expect)(wrapper.find('svg').html()).to.equal('<svg viewBox="0 0 32 32"><path class="path1" d="M27.414 12.586l-10-10c-0.781-0.781-2.047-0.781-2.828 0l-10 10c-0.781 0.781-0.781 2.047 0 2.828s2.047 0.781 2.828 0l6.586-6.586v19.172c0 1.105 0.895 2 2 2s2-0.895 2-2v-19.172l6.586 6.586c0.39 0.39 0.902 0.586 1.414 0.586s1.024-0.195 1.414-0.586c0.781-0.781 0.781-2.047 0-2.828z"></path></svg>');
    done();
  });

  it('did load VerticleButton', function (done) {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_reactScrollUpButton.VerticleButton, null));
    console.log(wrapper.find('span').html());
    (0, _chai.expect)(wrapper.find('span').html()).to.equal('<span style="font-size: 23px; color: white;">UP â†’</span>');
    done();
  });
});